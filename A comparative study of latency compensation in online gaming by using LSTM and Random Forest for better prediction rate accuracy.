import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Load the dataset
file_path = '/content/sample_data/online games.csv' # Update with your dataset path
data = pd.read_csv(file_path)

# Preprocessing
data = data.dropna()
X = data[['Rank', 'Year', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]
y = data['Global_Sales']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ---- Random Forest Model ----
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
rf_preds = rf_model.predict(X_test)
rf_accuracy = r2_score(y_test, rf_preds) * 100

# ---- LSTM Model ----
# Reshape data for LSTM (samples, timesteps, features)
X_train_lstm = np.reshape(X_train.values, (X_train.shape[0], 1, X_train.shape[1]))
X_test_lstm = np.reshape(X_test.values, (X_test.shape[0], 1, X_test.shape[1]))

lstm_model = Sequential()
lstm_model.add(LSTM(50, activation='relu', input_shape=(X_train_lstm.shape[1], X_train_lstm.shape[2])))
lstm_model.add(Dense(1))
lstm_model.compile(optimizer='adam', loss='mse')

lstm_model.fit(X_train_lstm, y_train, epochs=10, batch_size=16, verbose=0)
lstm_preds = lstm_model.predict(X_test_lstm).flatten()
lstm_accuracy = r2_score(y_test, lstm_preds) * 100

# ---- Results ----
print(f"Random Forest Accuracy: {rf_accuracy:.2f}%")
print(f"LSTM Accuracy: {lstm_accuracy:.2f}%")

# ---- Plot Comparison ----
models = ['Random Forest', 'LSTM']
accuracies = [rf_accuracy, lstm_accuracy]

plt.figure(figsize=(8, 5))
plt.bar(models, accuracies, color=['blue', 'orange'])
plt.title('Comparison of Prediction Accuracy')
plt.ylabel('Accuracy (%)')
plt.ylim(0, 100)
plt.show()
